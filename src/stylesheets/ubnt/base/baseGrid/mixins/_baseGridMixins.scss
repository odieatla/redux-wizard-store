// Centered container element
@mixin baseMakeGridContainerFixed($gutter) {
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix();
}

// Creates a wrapper for a series of columns
@mixin baseMakeGridRow($gutter) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix();
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$base-grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin baseMakeGridColumns() {
  $list: '';
  $i: 1;
  $list: ".col--xs#{$i}, .col--sm#{$i}, .col--md#{$i}, .col--lg#{$i}, .col--xlg#{$i}, .col--xxlg#{$i}";
  @for $i from (1 + 1) through $base-grid-columns {
    $list: "#{$list}, .col--xs#{$i}, .col--sm#{$i}, .col--md#{$i}, .col--lg#{$i}, .col--xlg#{$i}, .col--xxlg#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($base-grid-gutter-width / 2);
    padding-right: ($base-grid-gutter-width / 2);
  }
}

@mixin baseMakeComfyGridColumns() {
  $list: '';
  $i: 1;
  $list: ".col--xs#{$i}, .col--sm#{$i}, .col--md#{$i}, .col--lg#{$i}, .col--xlg#{$i}, .col--xxlg#{$i}";
  @for $i from (1 + 1) through $base-grid-columns {
    $list: "#{$list}, .col--xs#{$i}, .col--sm#{$i}, .col--md#{$i}, .col--lg#{$i}, .col--xlg#{$i}, .col--xxlg#{$i}";
  }
  #{$list} {
    padding-left:  ($base-comfy-grid-gutter-width / 2);
    padding-right: ($base-comfy-grid-gutter-width / 2);
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin baseMakeGridFloatColumns($class) {
  $list: '';
  $i: 1;
  $list: ".col--#{$class}#{$i}";
  @for $i from (1 + 1) through $base-grid-columns {
    $list: "#{$list}, .col--#{$class}#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin baseGridCalcColumn($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col--#{$class}#{$index} {
      width: percentage(($index / $base-grid-columns));
    }
  }
  @if ($type == push) {
    .col--#{$class}Push#{$index} {
      left: percentage(($index / $base-grid-columns));
    }
  }
  @if ($type == pull) {
    .col--#{$class}Pull#{$index} {
      right: percentage(($index / $base-grid-columns));
    }
  }
  @if ($type == offset) {
    .col--#{$class}Offset#{$index} {
      margin-left: percentage(($index / $base-grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin baseGridLoopColumns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include baseGridCalcColumn($i, $class, $type);
  }
}

// Create grid for specific class
@mixin baseMakeGrid($class) {
  @include baseMakeGridFloatColumns($class);
  @include baseGridLoopColumns($base-grid-columns, $class, width);
  @include baseGridLoopColumns($base-grid-columns, $class, pull);
  @include baseGridLoopColumns($base-grid-columns, $class, push);
  @include baseGridLoopColumns($base-grid-columns, $class, offset);
}
